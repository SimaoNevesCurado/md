# -*- coding: utf-8 -*-
"""
Created on Wed May 29 18:36:34 2024

@author: ruben
"""

'''

Recurso 2021

'''

import math as mt
import matplotlib.pyplot as plt
import numpy as np
from numpy.linalg import matrix_power as mpower


universo = set(np.arange(-2500,1500))

A = set()

for i in universo:
    print(i)
    if (i % -4) == 0:
        A.add(i)
        
'''

A = -2500 -2496 -2492 -2488 -2484 -2480 -2476 -2472 -2468 -2464 -2460 -2456 -2452 -2448 -2444 -2440 -2436 -2432 -2428 -2424 -2420 -2416 -2412 -2408 -2404 -2400 -2396 -2392 -2388 -2384 -2380 -2376 -2372 -2368 -2364 -2360 -2356 -2352 -2348 -2344 -2340 -2336 -2332 -2328 -2324 -2320 -2316 -2312 -2308 -2304 -2300 -2296 -2292 -2288 -2284 -2280 -2276 -2272 -2268 -2264 -2260 -2256 -2252 -2248 -2244 -2240 -2236 -2232 -2228 -2224 -2220 -2216 -2212 -2208 -2204 -2200 -2196 -2192 -2188 -2184 -2180 -2176 -2172 -2168 -2164 -2160 -2156 -2152 -2148 -2144 -2140 -2136 -2132 -2128 -2124 -2120 -2116 -2112 -2108 -2104 -2100 -2096 -2092 -2088 -2084 -2080 -2076 -2072 -2068 -2064 -2060 -2056 -2052 -2048 -2044 -2040 -2036 -2032 -2028 -2024 -2020 -2016 -2012 -2008 -2004 -2000 -1996 -1992 -1988 -1984 -1980 -1976 -1972 -1968 -1964 -1960 -1956 -1952 -1948 -1944 -1940 -1936 -1932 -1928 -1924 -1920 -1916 -1912 -1908 -1904 -1900 -1896 -1892 -1888 -1884 -1880 -1876 -1872 -1868 -1864 -1860 -1856 -1852 -1848 -1844 -1840 -1836 -1832 -1828 -1824 -1820 -1816 -1812 -1808 -1804 -1800 -1796 -1792 -1788 -1784 -1780 -1776 -1772 -1768 -1764 -1760 -1756 -1752 -1748 -1744 -1740 -1736 -1732 -1728 -1724 -1720 -1716 -1712 -1708 -1704 -1700 -1696 -1692 -1688 -1684 -1680 -1676 -1672 -1668 -1664 -1660 -1656 -1652 -1648 -1644 -1640 -1636 -1632 -1628 -1624 -1620 -1616 -1612 -1608 -1604 -1600 -1596 -1592 -1588 -1584 -1580 -1576 -1572 -1568 -1564 -1560 -1556 -1552 -1548 -1544 -1540 -1536 -1532 -1528 -1524 -1520 -1516 -1512 -1508 -1504 -1500 -1496 -1492 -1488 -1484 -1480 -1476 -1472 -1468 -1464 -1460 -1456 -1452 -1448 -1444 -1440 -1436 -1432 -1428 -1424 -1420 -1416 -1412 -1408 -1404 -1400 -1396 -1392 -1388 -1384 -1380 -1376 -1372 -1368 -1364 -1360 -1356 -1352 -1348 -1344 -1340 -1336 -1332 -1328 -1324 -1320 -1316 -1312 -1308 -1304 -1300 -1296 -1292 -1288 -1284 -1280 -1276 -1272 -1268 -1264 -1260 -1256 -1252 -1248 -1244 -1240 -1236 -1232 -1228 -1224 -1220 -1216 -1212 -1208 -1204 -1200 -1196 -1192 -1188 -1184 -1180 -1176 -1172 -1168 -1164 -1160 -1156 -1152 -1148 -1144 -1140 -1136 -1132 -1128 -1124 -1120 -1116 -1112 -1108 -1104 -1100 -1096 -1092 -1088 -1084 -1080 -1076 -1072 -1068 -1064 -1060 -1056 -1052 -1048 -1044 -1040 -1036 -1032 -1028 -1024 -1020 -1016 -1012 -1008 -1004 -1000 -996 -992 -988 -984 -980 -976 -972 -968 -964 -960 -956 -952 -948 -944 -940 -936 -932 -928 -924 -920 -916 -912 -908 -904 -900 -896 -892 -888 -884 -880 -876 -872 -868 -864 -860 -856 -852 -848 -844 -840 -836 -832 -828 -824 -820 -816 -812 -808 -804 -800 -796 -792 -788 -784 -780 -776 -772 -768 -764 -760 -756 -752 -748 -744 -740 -736 -732 -728 -724 -720 -716 -712 -708 -704 -700 -696 -692 -688 -684 -680 -676 -672 -668 -664 -660 -656 -652 -648 -644 -640 -636 -632 -628 -624 -620 -616 -612 -608 -604 -600 -596 -592 -588 -584 -580 -576 -572 -568 -564 -560 -556 -552 -548 -544 -540 -536 -532 -528 -524 -520 -516 -512 -508 -504 -500 -496 -492 -488 -484 -480 -476 -472 -468 -464 -460 -456 -452 -448 -444 -440 -436 -432 -428 -424 -420 -416 -412 -408 -404 -400 -396 -392 -388 -384 -380 -376 -372 -368 -364 -360 -356 -352 -348 -344 -340 -336 -332 -328 -324 -320 -316 -312 -308 -304 -300 -296 -292 -288 -284 -280 -276 -272 -268 -264 -260 -256 -252 -248 -244 -240 -236 -232 -228 -224 -220 -216 -212 -208 -204 -200 -196 -192 -188 -184 -180 -176 -172 -168 -164 -160 -156 -152 -148 -144 -140 -136 -132 -128 -124 -120 -116 -112 -108 -104 -100 -96 -92 -88 -84 -80 -76 -72 -68 -64 -60 -56 -52 -48 -44 -40 -36 -32 -28 -24 -20 -16 -12 -8 -4 0 4 8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80 84 88 92 96 100 104 108 112 116 120 124 128 132 136 140 144 148 152 156 160 164 168 172 176 180 184 188 192 196 200 204 208 212 216 220 224 228 232 236 240 244 248 252 256 260 264 268 272 276 280 284 288 292 296 300 304 308 312 316 320 324 328 332 336 340 344 348 352 356 360 364 368 372 376 380 384 388 392 396 400 404 408 412 416 420 424 428 432 436 440 444 448 452 456 460 464 468 472 476 480 484 488 492 496 500 504 508 512 516 520 524 528 532 536 540 544 548 552 556 560 564 568 572 576 580 584 588 592 596 600 604 608 612 616 620 624 628 632 636 640 644 648 652 656 660 664 668 672 676 680 684 688 692 696 700 704 708 712 716 720 724 728 732 736 740 744 748 752 756 760 764 768 772 776 780 784 788 792 796 800 804 808 812 816 820 824 828 832 836 840 844 848 852 856 860 864 868 872 876 880 884 888 892 896 900 904 908 912 916 920 924 928 932 936 940 944 948 952 956 960 964 968 972 976 980 984 988 992 996 1000 1004 1008 1012 1016 1020 1024 1028 1032 1036 1040 1044 1048 1052 1056 1060 1064 1068 1072 1076 1080 1084 1088 1092 1096 1100 1104 1108 1112 1116 1120 1124 1128 1132 1136 1140 1144 1148 1152 1156 1160 1164 1168 1172 1176 1180 1184 1188 1192 1196 1200 1204 1208 1212 1216 1220 1224 1228 1232 1236 1240 1244 1248 1252 1256 1260 1264 1268 1272 1276 1280 1284 1288 1292 1296 1300 1304 1308 1312 1316 1320 1324 1328 1332 1336 1340 1344 1348 1352 1356 1360 1364 1368 1372 1376 1380 1384 1388 1392 1396 1400 1404 1408 1412 1416 1420 1424 1428 1432 1436 1440 1444 1448 1452 1456 1460 1464 1468 1472 1476 1480 1484 1488 1492 1496
'''    
    
B = set()

for i in universo:
    if ((5*i-3) % 143) == (3 % 143):
        B.add(i)
        
        
C = (universo - (A | B) | (universo - (A^B)))

len(C)
'''
2-
'''

def s(n):
    suma = 0
    
    for i in range(1,n):
        suma += ((-1)**i+1) / (i * 2 ** i)
        
    return suma

y = list()

for i in range(1,16):
    yehaw = s(i)
    y.append(yehaw)
    
    
x = np.arange(1, 16)

plt.plot(x,y, '*')


# B)

for i in range(0,100):
    print(s(i))
    if abs(s(i) - mt.log(1.5)) < 10**-8:
        print(i)
        break


# 3- 


def is_avec(x):
   if len(x) != 13:
        print("Numero invalido de caracteres na string")
        return
   left = int(x[0:10])
   right = int(x[10:])
       
   if( right % 511 == left % 511):
       return "Avec"
   else:
       return "Not Avec"
       
is_avec("3023218782213")



#


import pandas as pd
FICHEIRO = pd.ExcelFile(r"D:\ESTG_Stuff\Matematica Discreta Workspace\Teste recurso 2021\Material\Dados.xlsx")
F1 = pd.read_excel(FICHEIRO, 'Folha1', header=None)
A=F1.to_numpy()

'''
def funcao2(M):
    [c,d]=M.shape
    Mi=M@M
    Br=M+Mi
    Br[Br!=0]=1
    return (M==Br).all()
'''



# d
B = A.copy()

[a,b] = B.shape

for i in range(a):
    for j in range(b):
        if(B[i,j] == 1):
            print("here")
            B[j,i] = 1

def Warshall(A):
    [L,C]=A.shape
    P=A.copy()
    for k in range(0,L):
        for i in range(0,L):
            for j in range(0,C):
                if P[i,j]==0:
                    P[i,j]=P[i,k] & P[k,j]
    return P


Warshall(A)


import networkx as nx
import matplotlib.pyplot as plt

G = nx.DiGraph()

# Adicionar arestas ao grafo baseado na matriz de adjacência
for i in range(len(A)):
    for j in range(len(A[i])):
        if A[i][j] != 0:
            G.add_edge(i, j)

# Desenhar o grafo
pos = nx.spring_layout(G)  # Layout para uma melhor visualização
nx.draw(G, pos, with_labels=True, node_size=700, node_color="skyblue", arrowsize=20)
plt.show()
